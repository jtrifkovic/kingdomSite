	
	--------------------------------------------------------------
	
	Change state on true or false
	
	const [isGoingOut, setIsGoingOut] = useState(false)
        function handleClick(){
            setIsGoingOut(prevState => !prevState)
        }
        
        --------------------------------------------------------------
        
        set state(
        definises u parentu a pozivas u child)
        
        --------------------------------------------------------------
        
        classnames dodavanje klasa u odnosu na uslov
        
        --------------------------------------------------------------
        
        Add new items to array
        
        const [list, setList] = useState(["List item 1", "List item 2", "List item 3"])
        const addItem = () => {
            setList([...list, `List item ${list.length + 1}`])
        }
        const newList= list.map(list => <h1 key={list}>{list}</h1>)
       
 	---------------------------------------------------------------      
       
      	Change only one thing in array
       
        const [contact, setContact] = useState({
        firstName:"John",
        lastName:"Doe",
        phone: "065 225 883",
        email:"staima@nista.brate",
        isFavorite: false
        })
       
        let starIcon = contact.isFavorite ? filled star : empty star
       
        function changeFavorite = () => {
        setContact(prevContact => ({
         ...prevContact (This means to spread the array(call all items in the data)
        isFavorite: !prevContact.isFavorite <--- changing this element
        })}
        
        ----------------------------------------------------------------
        
        Mapping 
        
        1. Import data from component
        2. If the name of the data is 'box' u can use 
           const boxElements = box.map(box => (
           <div key={box.id} </div>)
       	3. Now it pulls all the data from 'box.js' and rendering to page.
           All changes to 'data.js' will automatically change on your page.
           
        ----------------------------------------------------------------   
        
        If else petlja

	{ message.senderId === myId ? <div></div> : <div></div> }

	// prije upitnika sve je if, posle upitnika u ovom divu ako je tacan 
	if to ce se  ispisati, 
	a posle dvotacki ako nije tacan if uslov sta ce se ispisati


	IF petlja

	{  message.senderId === myId && <div>CONTENT</div> }

	// ovo je samo if petlja u sustini ako je uslov tacan onda ce se ispisati
	 kontent Iz ovog diva
	
	
	---------------------------------------------------------------------------
	
	useEffect()

	useEffect ( () => { 
	// sve sto je unutar funkcije, svaki put kad se app renderuje ona se izvrsava.
	})
	//
	
	useEffect(() => {
	//sve sto je unutar funkcije, izvrsava se samo kad se aplikacija pokrene
	}, [] )
	
	useEffect(() => {
	// sve sto je unutar funkcije, izvrsava se na svaku promjenu te komponente(name)
	za ovaj primjer
	}, [name]-primjer }
	
	
	
	useEffect(() => {
	// sve sto je unutar funkcije, sve sto se nalazi u return izvrsava se prije 
	renderovanja u useeffect da bi se ocistio predhodni state
	return () => {}
	})
	
	---------------------------------------------------------------------------
	
	const friend = ["John", "Michael", "Steph"];

        // adding element to array 
        friend.push("Allen"); // add to last place of array
        friend.unshift("Ben");// add to first place of array

        // remove element from array
        friend.pop(); // remove last element of array 
        friend.shift(); // remove first element of array